}
# Step 2 - predicting and evaluating the model on train data
predictions = predict(lin_mod, newdata = train)
eval_metrics(lin_mod, train, predictions, target = 'Margin')
# Step 3 - predicting and evaluating the model on test data
predictions = predict(lin_mod, newdata = test)
eval_metrics(lin_mod, test, predictions, target = 'Margin')
dummies <- dummyVars(Margin ~ ., data = nba_lin)
train_dummies = predict(dummies, newdata = train)
test_dummies = predict(dummies, newdata = test)
print(dim(train_dummies)); print(dim(test_dummies))
x = as.matrix(train_dummies)
y_train = train$Margin
x_test = as.matrix(test_dummies)
y_test = test$Margin
lambdas <- 10^seq(2, -3, by = -.1)
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
summary(ridge_reg)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
# Compute R^2 from true and predicted values
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
# Model performance metrics
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
# Prediction and evaluation on train data
predictions_train <- predict(ridge_reg, s = optimal_lambda, newx = x)
eval_results(y_train, predictions_train, train)
# Prediction and evaluation on test data
predictions_test <- predict(ridge_reg, s = optimal_lambda, newx = x_test)
eval_results(y_test, predictions_test, test)
lambdas <- 10^seq(2, -3, by = -.1)
# Setting alpha = 1 implements lasso regression
lasso_reg <- cv.glmnet(x, y_train, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 5)
# Best
lambda_best <- lasso_reg$lambda.min
lambda_best
lasso_model <- glmnet(x, y_train, alpha = 1, lambda = lambda_best, standardize = TRUE)
predictions_train <- predict(lasso_model, s = lambda_best, newx = x)
eval_results(y_train, predictions_train, train)
predictions_test <- predict(lasso_model, s = lambda_best, newx = x_test)
eval_results(y_test, predictions_test, test)
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(tidyverse, readxl, na.tools, caTools, Amelia, lubridate, hms,
ggthemes, ggrepel, ggimage, XML, RCurl, openxlsx,
rvest, nflfastR, nbastatR, nbaTools, data.table,
here, skimr, janitor, SimDesign, zoo, future,
corrgram, corrplot, tidymodels, broom, ggfortify)
rm(list=ls())
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(tidyverse, readxl, lubridate, openxlsx, nbastatR)
options(dplyr.summarise.inform = FALSE)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
rm(list=ls())
setwd("/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/")
fn <- "NBAdb1722_twoadj"
u <- paste0("/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/",fn,".xlsx")
final_db <- data.frame()
game_logs(seasons = c(2017:2022), result_types = c("team","players"))
dataGameLogsTeam <- dataGameLogsTeam %>% arrange(dateGame,idGame)
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(tidyverse, readxl, lubridate, openxlsx, nbastatR)
options(dplyr.summarise.inform = FALSE)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
rm(list=ls())
setwd("/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/")
fn <- "NBAdb1722_oneadj"
u <- paste0("/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/",fn,".xlsx")
final_db <- data.frame()
game_logs(seasons = c(2017:2022), result_types = c("team","players"))
dataGameLogsTeam <- dataGameLogsTeam %>% arrange(dateGame,idGame)
dataGameLogsTeam$dateGame <- as_date(dataGameLogsTeam$dateGame)
dates17 <- dataGameLogsTeam %>%
filter(yearSeason == 2017) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame)) %>%
mutate(stat_end = dateGame - 1) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates17[c(1:11),3] <- dates17[c(1:11),1]
dates18 <- dataGameLogsTeam %>%
filter(yearSeason == 2018) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame)) %>%
mutate(stat_end = dateGame - 1) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates18[c(1:11),3] <- dates18[c(1:11),1]
dates19 <- dataGameLogsTeam %>%
filter(yearSeason == 2019) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame)) %>%
mutate(stat_end = dateGame - 1) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates19[c(1:11),3] <- dates19[c(1:11),1]
dates20 <- dataGameLogsTeam %>%
filter(yearSeason == 2020) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame)) %>%
mutate(stat_end = dateGame - 1) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates20[c(1:11),3] <- dates20[c(1:11),1]
dates21 <- dataGameLogsTeam %>%
filter(yearSeason == 2021) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame - 1)) %>%
mutate(stat_end = dateGame) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 13, 0, 1))
dates21[c(1:11),3] <- dates21[c(1:11),1]
dates22 <- dataGameLogsTeam %>%
filter(yearSeason == 2022) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame - 1)) %>%
mutate(stat_end = dateGame) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates22[c(1:11),3] <- dates22[c(1:11),1]
dates <- as.data.frame(bind_rows(dates22, dates21, dates20, dates19, dates18, dates17))
dates_no_adj <- dates %>%
filter(adj == 0)
dates_adj <- dates %>%
filter(adj == 1)
b <- 1
h <- nrow(dates_no_adj)
stats_start_gxg <- dates_no_adj[b,2]
stats_end_gxg <- dates_no_adj[b,3]
gm_day_gxg <- dates_no_adj[b,1]
stat_range <- dataGameLogsTeam %>% filter(dateGame >= stats_start_gxg & dateGame <= stats_end_gxg)
game_range <- left_join(dataGameLogsTeam, dataGameLogsTeam,
by = c("idGame" = "idGame", "slugTeam" = "slugOpponent"))
gl <- left_join(stat_range, stat_range, by = c("idGame" = "idGame", "slugTeam" = "slugOpponent"))
gl <- gl %>%
select(13,8,17,62,7,45,90,34,79,
24,25,27,28,35,36,37,38,39,40,43,41,42,44,
69,70,72,73,80,81,82,83,84,85,88,86,87,89)
colnames(gl) <- c("Date", "teamLoc", "teamName", "opptName", "teamRslt",
"teamPTS", "opptPTS", "teamMin", "opptMin",
"teamFGM", "teamFGA", "team3PM", "team3PA", "teamFTM",
"teamFTA", "teamORB", "teamDRB", "teamTRB", "teamAST",
"teamTOV", "teamSTL", "teamBLK", "teamPF",
"opptFGM", "opptFGA", "oppt3PM", "oppt3PA", "opptFTM",
"opptFTA", "opptORB", "opptDRB", "opptTRB", "opptAST",
"opptTOV", "opptSTL", "opptBLK", "opptPF")
home <- gl %>%
filter(teamLoc == "H")
away <- gl %>%
filter(teamLoc == "A")
gl <- gl %>%
add_count(teamName, name = "teamGameCount") %>%
add_count(opptName, name = "opptGameCount")
away <- away %>%
add_count(teamName, name = "teamGameCount") %>%
add_count(opptName, name = "opptGameCount")
home <- home %>%
add_count(teamName, name = "teamGameCount") %>%
add_count(opptName, name = "opptGameCount")
season_grouped <- gl %>%
select(3,6:38) %>%
group_by(teamName,teamGameCount) %>%
summarise(across(c(teamPTS:opptPF), sum))
season_adv <- season_grouped
season_adv$Poss <- with(season_adv, .5 * (teamFGA + .4 * teamFTA - 1.07 * (teamORB/(teamORB + opptDRB)) * (teamFGA-teamFG) + teamTOV) +
(teamFGA + .4 * opptFTA - 1.07 * (opptORB/(opptORB + teamDRB)) * (opptFGA-opptFG) + opptTOV))
season_adv$Poss <- with(season_adv, .5 * (teamFGA + .4 * teamFTA - 1.07 * (teamORB/(teamORB + opptDRB)) * (teamFGA-teamFGM) + teamTOV) +
(teamFGA + .4 * opptFTA - 1.07 * (opptORB/(opptORB + teamDRB)) * (opptFGA-opptFGM) + opptTOV))
View(season_adv)
season_adv$Poss <- with(season_adv, 0.5 * ((teamFGA + 0.4 * teamFTA - 1.07 * (teamORB / (teamORB + opptDRB)) * (teamFGA - teamFGM) + teamTOV) + (opptFGA + 0.4 * opptFTA - 1.07 * (opptORB / (opptORB + teamDRB)) * (opptFGA - opptFGM) + opptTOV)))
View(season_adv)
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(tidyverse, readxl, lubridate, openxlsx, nbastatR)
options(dplyr.summarise.inform = FALSE)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
rm(list=ls())
setwd("/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/")
fn <- "NBAdb1722_oneadj"
u <- paste0("/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/",fn,".xlsx")
final_db <- data.frame()
game_logs(seasons = c(2017:2022), result_types = c("team","players"))
dataGameLogsTeam <- dataGameLogsTeam %>% arrange(dateGame,idGame)
dataGameLogsTeam$dateGame <- as_date(dataGameLogsTeam$dateGame)
dates17 <- dataGameLogsTeam %>%
filter(yearSeason == 2017) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame)) %>%
mutate(stat_end = dateGame - 1) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates17[c(1:11),3] <- dates17[c(1:11),1]
dates18 <- dataGameLogsTeam %>%
filter(yearSeason == 2018) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame)) %>%
mutate(stat_end = dateGame - 1) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates18[c(1:11),3] <- dates18[c(1:11),1]
dates19 <- dataGameLogsTeam %>%
filter(yearSeason == 2019) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame)) %>%
mutate(stat_end = dateGame - 1) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates19[c(1:11),3] <- dates19[c(1:11),1]
dates20 <- dataGameLogsTeam %>%
filter(yearSeason == 2020) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame)) %>%
mutate(stat_end = dateGame - 1) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates20[c(1:11),3] <- dates20[c(1:11),1]
dates21 <- dataGameLogsTeam %>%
filter(yearSeason == 2021) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame - 1)) %>%
mutate(stat_end = dateGame) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 13, 0, 1))
dates21[c(1:11),3] <- dates21[c(1:11),1]
dates22 <- dataGameLogsTeam %>%
filter(yearSeason == 2022) %>%
distinct(dateGame) %>%
mutate(stat_start = min(dateGame - 1)) %>%
mutate(stat_end = dateGame) %>%
mutate(adj = if_else(dateGame <= min(as.Date(dateGame)) + 20, 0, 1))
dates22[c(1:11),3] <- dates22[c(1:11),1]
dates <- as.data.frame(bind_rows(dates22, dates21, dates20, dates19, dates18, dates17))
dates_no_adj <- dates %>%
filter(adj == 0)
dates_adj <- dates %>%
filter(adj == 1)
b <- 1
h <- nrow(dates_no_adj)
stats_start_gxg <- dates_no_adj[b,2]
stats_end_gxg <- dates_no_adj[b,3]
gm_day_gxg <- dates_no_adj[b,1]
stat_range <- dataGameLogsTeam %>% filter(dateGame >= stats_start_gxg & dateGame <= stats_end_gxg)
game_range <- left_join(dataGameLogsTeam, dataGameLogsTeam,
by = c("idGame" = "idGame", "slugTeam" = "slugOpponent"))
gl <- left_join(stat_range, stat_range, by = c("idGame" = "idGame", "slugTeam" = "slugOpponent"))
gl <- gl %>%
select(13,8,17,62,7,45,90,34,79,
24,25,27,28,35,36,37,38,39,40,43,41,42,44,
69,70,72,73,80,81,82,83,84,85,88,86,87,89)
colnames(gl) <- c("Date", "teamLoc", "teamName", "opptName", "teamRslt",
"teamPTS", "opptPTS", "teamMin", "opptMin",
"teamFGM", "teamFGA", "team3PM", "team3PA", "teamFTM",
"teamFTA", "teamORB", "teamDRB", "teamTRB", "teamAST",
"teamTOV", "teamSTL", "teamBLK", "teamPF",
"opptFGM", "opptFGA", "oppt3PM", "oppt3PA", "opptFTM",
"opptFTA", "opptORB", "opptDRB", "opptTRB", "opptAST",
"opptTOV", "opptSTL", "opptBLK", "opptPF")
home <- gl %>%
filter(teamLoc == "H")
away <- gl %>%
filter(teamLoc == "A")
gl <- gl %>%
add_count(teamName, name = "teamGameCount") %>%
add_count(opptName, name = "opptGameCount")
away <- away %>%
add_count(teamName, name = "teamGameCount") %>%
add_count(opptName, name = "opptGameCount")
home <- home %>%
add_count(teamName, name = "teamGameCount") %>%
add_count(opptName, name = "opptGameCount")
season_grouped <- gl %>%
select(3,6:38) %>%
group_by(teamName,teamGameCount) %>%
summarise(across(c(teamPTS:opptPF), sum))
season_adv <- season_grouped
View(season_adv)
season_adv$Poss <- with(season_adv, 0.5 * ((teamFGA + 0.4 * teamFTA - 1.07 * (teamORB / (teamORB + opptDRB)) * (teamFGA - teamFGM) + teamTOV) + (opptFGA + 0.4 * opptFTA - 1.07 * (opptORB / (opptORB + teamDRB)) * (opptFGA - opptFGM) + opptTOV)))
season_adv$oPoss <- with(season_adv, opptFGA - opptORB + opptTOV + (.44 * opptFTA))
View(season_adv)
View(season_adv)
View(season_adv)
season_adv$Poss <- with(season_adv, 0.5 * ((teamFGA + 0.4 * teamFTA - 1.07 * (teamORB / (teamORB + opptDRB)) * (teamFGA - teamFGM) + teamTOV) + (opptFGA + 0.4 * opptFTA - 1.07 * (opptORB / (opptORB + teamDRB)) * (opptFGA - opptFGM) + opptTOV)))
season_adv <- season_grouped
season_adv$Poss <- with(season_adv, 0.5 * ((teamFGA + 0.4 * teamFTA - 1.07 * (teamORB / (teamORB + opptDRB)) * (teamFGA - teamFGM) + teamTOV) + (opptFGA + 0.4 * opptFTA - 1.07 * (opptORB / (opptORB + teamDRB)) * (opptFGA - opptFGM) + opptTOV)))
season_adv$oPoss <- with(season_adv, 0.5 * ((opptFGA + 0.4 * opptFTA - 1.07 * (opptORB / (opptORB + teamDRB)) * (opptFGA - opptFGM) + opptTOV) + (teamFGA + 0.4 * teamFTA - 1.07 * (teamORB / (teamORB + opptDRB)) * (teamFGA - teamFGM) + teamTOV)))
season_adv$Poss_old <- with(season_adv, teamFGA - teamORB + teamTOV + (.44 * teamFTA))
season_adv$oPoss_old <- with(season_adv, opptFGA - opptORB + opptTOV + (.44 * opptFTA))
View(season_adv)
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(tidyverse, readxl, lubridate, openxlsx, nbastatR, rvest, gt)
Sys.setenv("VROOM_CONNECTION_SIZE" = 131072 * 2)
rm(list=ls())
setwd("/Users/Jesse/Documents/MyStuff/NBA Betting/NBA-Betting-21-22/")
game_logs(seasons = 2022, result_types = c("team","players"), season_types = c("Regular Season","Playoffs"))
dataGameLogsTeam <- dataGameLogsTeam %>% arrange(dateGame,idGame)
dataGameLogsTeam$dateGame <- as_date(dataGameLogsTeam$dateGame)
dataGameLogsPlayer <- dataGameLogsPlayer %>% arrange(dateGame,idGame)
gl <- left_join(dataGameLogsTeam, dataGameLogsTeam, by = c("idGame" = "idGame", "slugTeam" = "slugOpponent"))
gl <- gl %>%
select(13,8,17,62,7,45,90,34,79,
24,25,27,28,35,36,37,38,39,40,43,41,42,44,
69,70,72,73,80,81,82,83,84,85,88,86,87,89)
colnames(gl) <- c("Date", "teamLoc", "teamName", "opptName", "teamRslt",
"teamPTS", "opptPTS", "teamMin", "opptMin",
"teamFGM", "teamFGA", "team3PM", "team3PA", "teamFTM",
"teamFTA", "teamORB", "teamDRB", "teamTRB", "teamAST",
"teamTOV", "teamSTL", "teamBLK", "teamPF",
"opptFGM", "opptFGA", "oppt3PM", "oppt3PA", "opptFTM",
"opptFTA", "opptORB", "opptDRB", "opptTRB", "opptAST",
"opptTOV", "opptSTL", "opptBLK", "opptPF")
gl <- gl %>% filter(Date > '2022-04-15')
gl$Poss <- with(gl, 0.5 * ((teamFGA + 0.4 * teamFTA - 1.07 * (teamORB / (teamORB + opptDRB)) * (teamFGA - teamFGM) + teamTOV) + (opptFGA + 0.4 * opptFTA - 1.07 * (opptORB / (opptORB + teamDRB)) * (opptFGA - opptFGM) + opptTOV)))
gl$oPoss <- with(gl, 0.5 * ((opptFGA + 0.4 * opptFTA - 1.07 * (opptORB / (opptORB + teamDRB)) * (opptFGA - opptFGM) + opptTOV) + (teamFGA + 0.4 * teamFTA - 1.07 * (teamORB / (teamORB + opptDRB)) * (teamFGA - teamFGM) + teamTOV)))
gl$Pace <- with(gl, 48 * (Poss + oPoss) / (2 * (teamMin/5)))
gl$oPace <- with(gl, 48 * (Poss + oPoss) / (2 * (opptMin/5)))
gl$ORtg <- with(gl, (teamPTS / Poss) * 100)
gl$DRtg <- with(gl, (opptPTS / oPoss) * 100)
gl$FG <- with(gl, teamFGM / teamFGA)
gl$SR2 <- with(gl, (teamFGA - team3PA) / teamFGA)
gl$FG3 <- with(gl, team3PM / team3PA)
gl$SR3 <- with(gl, team3PA / teamFGA)
gl$FT <- with(gl, teamFTM / teamFTA)
gl$FTR <- with(gl, teamFTM / teamFGA)
gl$ORB <- with(gl, teamORB / (teamORB + opptDRB))
gl$DRB <- with(gl, teamDRB / (teamDRB + opptORB))
gl$TRB <- with(gl, teamTRB / (teamTRB + opptTRB))
gl$AST <- with(gl, teamAST / teamFGM)
gl$TOV <- with(gl, teamTOV / Poss)
gl$STL <- with(gl, teamSTL / oPoss)
gl$BLK <- with(gl, teamBLK / (opptFGA - oppt3PA))
gl$PF <- with(gl, teamPF / oPoss)
gl$eFG <- with(gl, (teamFGM + .5 * team3PM) / teamFGA)
gl$TS <- with(gl, teamPTS / (2 * teamFGA + .44 * teamFTA))
gl$oFG <- with(gl, opptFGM / opptFGA)
gl$oSR2 <- with(gl, (opptFGA - oppt3PA) / opptFGA)
gl$oFG3 <- with(gl, oppt3PM / oppt3PA)
gl$oSR3 <- with(gl, oppt3PA / opptFGA)
gl$oFT <- with(gl, opptFTM / opptFTA)
gl$oFTR <- with(gl, opptFTM / opptFGA)
gl$oORB <- with(gl, opptORB / (opptORB + teamDRB))
gl$oDRB <- with(gl, opptDRB / (opptDRB + teamORB))
gl$oTRB <- with(gl, opptTRB / (teamTRB + opptTRB))
gl$oAST <- with(gl, opptAST / opptFGM)
gl$oTOV <- with(gl, opptTOV / oPoss)
gl$oSTL <- with(gl, opptSTL / Poss)
gl$oBLK <- with(gl, opptBLK / (teamFGA - team3PA))
gl$oPF <- with(gl, opptPF / Poss)
gl$oeFG <- with(gl, (opptFGM + .5 * oppt3PM) / opptFGA)
gl$oTS <- with(gl, opptPTS / (2 * opptFGA + .44 * opptFTA))
# ff <- gl %>% filter(is.na(teamRslt))
ff <- gl %>% tail(2)
ff[38:43] <- sapply(ff[38:43], round)
ff[44:75] <- sapply(ff[44:75], round, 3)
basic_box <- ff %>% select(1:37)
adv_box <- ff %>% select(1:9,38:75)
final_ff <- adv_box %>% select(1:3,6,8,30,22,23,21,26)
View(gl)
source("~/Documents/MyStuff/NBA Betting/NBAdb/NBAdb.R", echo=TRUE)
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(tidyverse, readxl, na.tools, caTools, Amelia, lubridate, hms,
ggthemes, ggrepel, ggimage, XML, RCurl, openxlsx,
rvest, nflfastR, nbastatR, nbaTools, data.table,
here, skimr, janitor, SimDesign, zoo, future,
corrgram, corrplot, tidymodels, broom, ggfortify)
rm(list=ls())
nba <- read_xlsx("/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/NBAdb1722_oneadj_pos.xlsx")
library(glmnet)
library(caret)
## no correlation - ts
nba_lin <- nba %>%
select(7,
14,15,16,18,19,21,24,30,34,35,37,40,43,
49,50,51,53,54,56,59,65,69,70,72,75,78)
set.seed(214)
sample <- sample.split(nba_lin$Margin, SplitRatio = .70)
train <- nba_lin %>% filter(sample == TRUE)
test <- nba_lin %>% filter(sample == FALSE)
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
summary(train)
lin_mod <- lm(Margin ~., data = train)
summary(lin_mod)
#Step 1 - create the evaluation metrics function
eval_metrics <- function(model, df, predictions, target) {
resids = df[,target] - predictions
resids2 = resids**2
N = length(predictions)
r2 = as.character(round(summary(model)$r.squared, 4))
adj_r2 = as.character(round(summary(model)$adj.r.squared, 4))
print(adj_r2) #Adjusted R-squared
print(as.character(round(sqrt(sum(resids2)/N), 4))) #RMSE
}
# Step 2 - predicting and evaluating the model on train data
predictions = predict(lin_mod, newdata = train)
eval_metrics(lin_mod, train, predictions, target = 'Margin')
# Step 3 - predicting and evaluating the model on test data
predictions = predict(lin_mod, newdata = test)
eval_metrics(lin_mod, test, predictions, target = 'Margin')
dummies <- dummyVars(Margin ~ ., data = nba_lin)
train_dummies = predict(dummies, newdata = train)
test_dummies = predict(dummies, newdata = test)
print(dim(train_dummies)); print(dim(test_dummies))
x = as.matrix(train_dummies)
y_train = train$Margin
x_test = as.matrix(test_dummies)
y_test = test$Margin
lambdas <- 10^seq(2, -3, by = -.1)
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
summary(ridge_reg)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
# Compute R^2 from true and predicted values
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
# Model performance metrics
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
# Prediction and evaluation on train data
predictions_train <- predict(ridge_reg, s = optimal_lambda, newx = x)
eval_results(y_train, predictions_train, train)
# Prediction and evaluation on test data
predictions_test <- predict(ridge_reg, s = optimal_lambda, newx = x_test)
eval_results(y_test, predictions_test, test)
lambdas <- 10^seq(2, -3, by = -.1)
# Setting alpha = 1 implements lasso regression
lasso_reg <- cv.glmnet(x, y_train, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 5)
# Best
lambda_best <- lasso_reg$lambda.min
lambda_best
lasso_model <- glmnet(x, y_train, alpha = 1, lambda = lambda_best, standardize = TRUE)
predictions_train <- predict(lasso_model, s = lambda_best, newx = x)
eval_results(y_train, predictions_train, train)
predictions_test <- predict(lasso_model, s = lambda_best, newx = x_test)
eval_results(y_test, predictions_test, test)
## no correlation - eFG
nba_lin <- nba %>%
select(7,
14,15,16,18,19,21,23,30,34,35,37,39,43,
49,50,51,53,54,56,58,65,69,70,72,74,78)
set.seed(214)
sample <- sample.split(nba_lin$Margin, SplitRatio = .70)
train <- nba_lin %>% filter(sample == TRUE)
test <- nba_lin %>% filter(sample == FALSE)
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
summary(train)
lin_mod <- lm(Margin ~., data = train)
summary(lin_mod)
#Step 1 - create the evaluation metrics function
eval_metrics <- function(model, df, predictions, target) {
resids = df[,target] - predictions
resids2 = resids**2
N = length(predictions)
r2 = as.character(round(summary(model)$r.squared, 4))
adj_r2 = as.character(round(summary(model)$adj.r.squared, 4))
print(adj_r2) #Adjusted R-squared
print(as.character(round(sqrt(sum(resids2)/N), 4))) #RMSE
}
# Step 2 - predicting and evaluating the model on train data
predictions = predict(lin_mod, newdata = train)
eval_metrics(lin_mod, train, predictions, target = 'Margin')
# Step 3 - predicting and evaluating the model on test data
predictions = predict(lin_mod, newdata = test)
eval_metrics(lin_mod, test, predictions, target = 'Margin')
dummies <- dummyVars(Margin ~ ., data = nba_lin)
train_dummies = predict(dummies, newdata = train)
test_dummies = predict(dummies, newdata = test)
print(dim(train_dummies)); print(dim(test_dummies))
x = as.matrix(train_dummies)
y_train = train$Margin
x_test = as.matrix(test_dummies)
y_test = test$Margin
lambdas <- 10^seq(2, -3, by = -.1)
ridge_reg = glmnet(x, y_train, nlambda = 25, alpha = 0, family = 'gaussian', lambda = lambdas)
summary(ridge_reg)
cv_ridge <- cv.glmnet(x, y_train, alpha = 0, lambda = lambdas)
optimal_lambda <- cv_ridge$lambda.min
optimal_lambda
# Compute R^2 from true and predicted values
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
# Model performance metrics
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
# Prediction and evaluation on train data
predictions_train <- predict(ridge_reg, s = optimal_lambda, newx = x)
eval_results(y_train, predictions_train, train)
# Prediction and evaluation on test data
predictions_test <- predict(ridge_reg, s = optimal_lambda, newx = x_test)
eval_results(y_test, predictions_test, test)
lambdas <- 10^seq(2, -3, by = -.1)
# Setting alpha = 1 implements lasso regression
lasso_reg <- cv.glmnet(x, y_train, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 5)
# Best
lambda_best <- lasso_reg$lambda.min
lambda_best
lasso_model <- glmnet(x, y_train, alpha = 1, lambda = lambda_best, standardize = TRUE)
predictions_train <- predict(lasso_model, s = lambda_best, newx = x)
eval_results(y_train, predictions_train, train)
predictions_test <- predict(lasso_model, s = lambda_best, newx = x_test)
eval_results(y_test, predictions_test, test)
