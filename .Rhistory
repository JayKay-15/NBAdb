classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
sigma = c(0.005, 0.01, 0.05),
C = c(0.25, 0.5, 0.75)
)
svm_win <- train(as.factor(team_winner) ~., data = train,
method = "svmRadial",
metric = "ROC",
trControl = ctrl,
tuneGrid = grid)
rm(list=ls()[! ls() %in% c("df_clean", "league_avg")])
df_clean_lag <- df_clean %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) lag(x, n = 1)))
View(df_clean_lag)
df_clean_lag <- df_clean %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) lag(x, n = 1))) %>%
ungroup()
View(df_clean_lag)
df_clean_lag <- df_clean %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) lag(x, n = 1))) %>%
ungroup() %>%
na.exclude()
View(df_clean_lag)
df_clean_lag <- df_clean %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) lag(x, n = 1))) %>%
ungroup() %>%
na.exclude() %>%
select(-ast_tov_pct, -opp_ast_tov_pct)
View(df_clean_lag)
set.seed(214)
train <- df_clean %>%
ungroup() %>%
filter(season %in% 2014:2021) %>%
select(10, 14:87) %>%
select(-ast_tov_pct, -opp_ast_tov_pct) %>%
mutate(team_winner = if_else(team_winner == TRUE, "W", "L")) %>%
na.exclude()
test <- df_clean %>%
ungroup() %>%
filter(season == 2022) %>%
select(10, 14:87) %>%
select(-ast_tov_pct, -opp_ast_tov_pct) %>%
mutate(team_winner = if_else(team_winner == TRUE, "W", "L")) %>%
na.exclude()
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# Model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
sigma = c(0.005, 0.01, 0.05),
C = c(0.25, 0.5, 0.75)
)
svm_win <- train(as.factor(team_winner) ~., data = train,
method = "svmRadial",
metric = "ROC",
trControl = ctrl,
tuneGrid = grid)
View(df_clean)
svm_win
svm_win$resample
svm_win$results
summary(svm_win)
plot(svm_win)
confusionMatrix(svm_win)
win_pred <- predict(svm_win, test, type = "prob")
confusionMatrix(as.factor(test$result), as.factor(ifelse(win_pred[,2] > 0.5, "W", "L")),
positive = "W")
### hoopR DB ------------------------------
library(tidyverse)
library(lubridate)
library(hoopR)
library(RSQLite)
library(DBI)
libary(caret)
libary(caret)
library(caret) # model training
library(e1071) # svm
# load box scores
box_scores <- hoopR::load_nba_team_box(seasons = c(2014:2022)) %>%
filter(team_id <= 30 & season_type == 2) %>%
arrange(desc(game_id))
# load schedule
nba_schedule <- load_nba_schedule(seasons = 2014:2022)
# create box score data frame
df_team <- box_scores %>%
left_join(nba_schedule %>% select(id, status_period),
by = c("game_id" = "id")
) %>%
mutate(
fast_break_points = as.numeric(fast_break_points),
points_in_paint = as.numeric(points_in_paint),
turnover_points = as.numeric(turnover_points),
mins = if_else(status_period > 4, ((status_period - 4)*5*5)+240, 240),
fg2m = field_goals_made - three_point_field_goals_made,
fg2a = field_goals_attempted - three_point_field_goals_attempted
) %>%
rename(
team_name_short = team_name,
team_loc = team_home_away,
team_name = team_display_name,
opp_id = opponent_team_id,
opp_name = opponent_team_display_name,
opp_score = opponent_team_score,
fg3m = three_point_field_goals_made,
fg3a = three_point_field_goals_attempted,
fgm = field_goals_made,
fga = field_goals_attempted,
ftm = free_throws_made,
fta = free_throws_attempted,
oreb = offensive_rebounds,
dreb = defensive_rebounds,
treb = total_rebounds,
ast = assists,
tov = turnovers,
stl = steals,
blk = blocks,
pf = fouls,
fb_pts = fast_break_points,
pip = points_in_paint,
tov_pts = turnover_points
) %>%
select(
game_id, season, season_type, game_date, team_loc, team_id, team_name,
opp_id, opp_name, team_winner, team_score, opp_score, mins,
fg2m, fg2a, fg3m, fg3a, fgm, fga, ftm, fta,
oreb, dreb, treb, ast, tov, stl, blk, pf, fb_pts, pip, tov_pts
)
# create opponent data frame
df_opp <- df_team %>%
select(game_id, team_id, fg2m, fg2a, fg3m, fg3a, fgm, fga, ftm, fta,
oreb, dreb, treb, ast, tov, stl, blk, pf, fb_pts, pip, tov_pts) %>%
rename_with(~paste0("opp_", .), -c(game_id, team_id))
# join team and opponent data frames
df_full <- df_team %>%
left_join(df_opp, by = c("game_id" = "game_id", "opp_id" = "team_id"))
# aggregate stats
df_agg <- df_full %>%
arrange(game_date, game_id) %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) pracma::movavg(x, n = 10, type = 'e')))
# calculate advanced stats
df_adv <- df_agg %>%
mutate(
poss = round(fga - oreb + tov + (0.44*fta), 0),
opp_poss = round(opp_fga - opp_oreb + opp_tov + (0.44*opp_fta), 0),
pace = round((poss + opp_poss)*48 / ((mins/5)*2), 0),
off_rtg = round((team_score/poss)*100, 1),
def_rtg = round((opp_score/opp_poss)*100, 1),
net_rtg = off_rtg - def_rtg,
fg2_pct = fg2m/fg2a,
fg2_sr = (fga-fg2a)/fga,
fg3_pct = fg3m/fg3a,
fg3_sr = (fga-fg3a)/fga,
fg_pct = fgm/fga,
efg_pct = (fg3m*0.5 + fgm)/fga,
ts_pct = team_score/(fga*2 + fta*0.44),
ft_pct = ftm/fta,
ftr = ftm/fga,
oreb_pct = oreb/(oreb+opp_dreb),
dreb_pct = dreb/(dreb+opp_oreb),
treb_pct = treb/(treb+opp_treb),
ast_pct = ast/fgm,
tov_pct = tov/poss,
ast_tov_pct = ast/tov,
stl_pct = stl/opp_poss,
blk_pct = blk/(opp_fga-opp_fg3a),
opp_fg2_pct = opp_fg2m/opp_fg2a,
opp_fg2_sr = (opp_fga-opp_fg2a)/opp_fga,
opp_fg3_pct = opp_fg3m/opp_fg3a,
opp_fg3_sr = (opp_fga-opp_fg3a)/opp_fga,
opp_fg_pct = opp_fgm/opp_fga,
opp_efg_pct = (opp_fg3m*0.5 + opp_fgm)/opp_fga,
opp_ts_pct = opp_score/(opp_fga*2 + opp_fta*0.44),
opp_ft_pct = opp_ftm/opp_fta,
opp_ftr = opp_ftm/opp_fga,
opp_oreb_pct = opp_oreb/(opp_oreb+dreb),
opp_dreb_pct = opp_dreb/(opp_dreb+oreb),
opp_treb_pct = opp_treb/(treb+opp_treb),
opp_ast_pct = opp_ast/opp_fgm,
opp_tov_pct = opp_tov/opp_poss,
opp_ast_tov_pct = opp_ast/opp_tov,
opp_stl_pct = opp_stl/poss,
opp_blk_pct = opp_blk/(fga-fg3a)
) %>%
select(
game_id:mins,fg2m,fg2a,fg2_pct,fg2_sr,fg3m,fg3a,fg3_pct,fg3_sr,
fgm,fga,fg_pct,efg_pct,ts_pct,ftm,fta,ft_pct,ftr,oreb,oreb_pct,
dreb,dreb_pct,treb,treb_pct,ast,ast_pct,tov,tov_pct,ast_tov_pct,tov_pts,
stl,stl_pct,blk,blk_pct,
opp_fg2m,opp_fg2a,opp_fg2_pct,opp_fg2_sr,opp_fg3m,opp_fg3a,
opp_fg3_pct,opp_fg3_sr,opp_fgm,opp_fga,opp_fg_pct,opp_efg_pct,
opp_ts_pct,opp_ftm,opp_fta,opp_ft_pct,opp_ftr,opp_oreb,opp_oreb_pct,
opp_dreb,opp_dreb_pct,opp_treb,opp_treb_pct,opp_ast,opp_ast_pct,
opp_tov,opp_tov_pct,opp_ast_tov_pct,opp_tov_pts,opp_stl,opp_stl_pct,
opp_blk,opp_blk_pct,
poss,opp_poss,pace,off_rtg,def_rtg,net_rtg
)
# attach betting odds
odds_clean <- readRDS("odds_clean")
df_final <- df_adv %>%
left_join(odds_clean, by = c("game_id"="game_id",
"team_loc"="location",
"team_id"="team_id"))
league_avg <- df_team %>%
arrange(game_date, game_id) %>%
group_by(season, team_loc) %>%
summarize(across(team_score:tov_pts, \(x) mean(x)))
rm(list=ls()[! ls() %in% c("df_clean", "league_avg")])
df_clean_lag <- df_clean %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) lag(x, n = 1))) %>%
ungroup() %>%
na.exclude() %>%
select(-ast_tov_pct, -opp_ast_tov_pct)
# load box scores
box_scores <- hoopR::load_nba_team_box(seasons = c(2014:2022)) %>%
filter(team_id <= 30 & season_type == 2) %>%
arrange(desc(game_id))
# load schedule
nba_schedule <- load_nba_schedule(seasons = 2014:2022)
# create box score data frame
df_team <- box_scores %>%
left_join(nba_schedule %>% select(id, status_period),
by = c("game_id" = "id")
) %>%
mutate(
fast_break_points = as.numeric(fast_break_points),
points_in_paint = as.numeric(points_in_paint),
turnover_points = as.numeric(turnover_points),
mins = if_else(status_period > 4, ((status_period - 4)*5*5)+240, 240),
fg2m = field_goals_made - three_point_field_goals_made,
fg2a = field_goals_attempted - three_point_field_goals_attempted
) %>%
rename(
team_name_short = team_name,
team_loc = team_home_away,
team_name = team_display_name,
opp_id = opponent_team_id,
opp_name = opponent_team_display_name,
opp_score = opponent_team_score,
fg3m = three_point_field_goals_made,
fg3a = three_point_field_goals_attempted,
fgm = field_goals_made,
fga = field_goals_attempted,
ftm = free_throws_made,
fta = free_throws_attempted,
oreb = offensive_rebounds,
dreb = defensive_rebounds,
treb = total_rebounds,
ast = assists,
tov = turnovers,
stl = steals,
blk = blocks,
pf = fouls,
fb_pts = fast_break_points,
pip = points_in_paint,
tov_pts = turnover_points
) %>%
select(
game_id, season, season_type, game_date, team_loc, team_id, team_name,
opp_id, opp_name, team_winner, team_score, opp_score, mins,
fg2m, fg2a, fg3m, fg3a, fgm, fga, ftm, fta,
oreb, dreb, treb, ast, tov, stl, blk, pf, fb_pts, pip, tov_pts
)
# create opponent data frame
df_opp <- df_team %>%
select(game_id, team_id, fg2m, fg2a, fg3m, fg3a, fgm, fga, ftm, fta,
oreb, dreb, treb, ast, tov, stl, blk, pf, fb_pts, pip, tov_pts) %>%
rename_with(~paste0("opp_", .), -c(game_id, team_id))
# join team and opponent data frames
df_full <- df_team %>%
left_join(df_opp, by = c("game_id" = "game_id", "opp_id" = "team_id"))
# aggregate stats
df_agg <- df_full %>%
arrange(game_date, game_id) %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) pracma::movavg(x, n = 10, type = 'e')))
# calculate advanced stats
df_adv <- df_agg %>%
mutate(
poss = round(fga - oreb + tov + (0.44*fta), 0),
opp_poss = round(opp_fga - opp_oreb + opp_tov + (0.44*opp_fta), 0),
pace = round((poss + opp_poss)*48 / ((mins/5)*2), 0),
off_rtg = round((team_score/poss)*100, 1),
def_rtg = round((opp_score/opp_poss)*100, 1),
net_rtg = off_rtg - def_rtg,
fg2_pct = fg2m/fg2a,
fg2_sr = (fga-fg2a)/fga,
fg3_pct = fg3m/fg3a,
fg3_sr = (fga-fg3a)/fga,
fg_pct = fgm/fga,
efg_pct = (fg3m*0.5 + fgm)/fga,
ts_pct = team_score/(fga*2 + fta*0.44),
ft_pct = ftm/fta,
ftr = ftm/fga,
oreb_pct = oreb/(oreb+opp_dreb),
dreb_pct = dreb/(dreb+opp_oreb),
treb_pct = treb/(treb+opp_treb),
ast_pct = ast/fgm,
tov_pct = tov/poss,
ast_tov_pct = ast/tov,
stl_pct = stl/opp_poss,
blk_pct = blk/(opp_fga-opp_fg3a),
opp_fg2_pct = opp_fg2m/opp_fg2a,
opp_fg2_sr = (opp_fga-opp_fg2a)/opp_fga,
opp_fg3_pct = opp_fg3m/opp_fg3a,
opp_fg3_sr = (opp_fga-opp_fg3a)/opp_fga,
opp_fg_pct = opp_fgm/opp_fga,
opp_efg_pct = (opp_fg3m*0.5 + opp_fgm)/opp_fga,
opp_ts_pct = opp_score/(opp_fga*2 + opp_fta*0.44),
opp_ft_pct = opp_ftm/opp_fta,
opp_ftr = opp_ftm/opp_fga,
opp_oreb_pct = opp_oreb/(opp_oreb+dreb),
opp_dreb_pct = opp_dreb/(opp_dreb+oreb),
opp_treb_pct = opp_treb/(treb+opp_treb),
opp_ast_pct = opp_ast/opp_fgm,
opp_tov_pct = opp_tov/opp_poss,
opp_ast_tov_pct = opp_ast/opp_tov,
opp_stl_pct = opp_stl/poss,
opp_blk_pct = opp_blk/(fga-fg3a)
) %>%
select(
game_id:mins,fg2m,fg2a,fg2_pct,fg2_sr,fg3m,fg3a,fg3_pct,fg3_sr,
fgm,fga,fg_pct,efg_pct,ts_pct,ftm,fta,ft_pct,ftr,oreb,oreb_pct,
dreb,dreb_pct,treb,treb_pct,ast,ast_pct,tov,tov_pct,ast_tov_pct,tov_pts,
stl,stl_pct,blk,blk_pct,
opp_fg2m,opp_fg2a,opp_fg2_pct,opp_fg2_sr,opp_fg3m,opp_fg3a,
opp_fg3_pct,opp_fg3_sr,opp_fgm,opp_fga,opp_fg_pct,opp_efg_pct,
opp_ts_pct,opp_ftm,opp_fta,opp_ft_pct,opp_ftr,opp_oreb,opp_oreb_pct,
opp_dreb,opp_dreb_pct,opp_treb,opp_treb_pct,opp_ast,opp_ast_pct,
opp_tov,opp_tov_pct,opp_ast_tov_pct,opp_tov_pts,opp_stl,opp_stl_pct,
opp_blk,opp_blk_pct,
poss,opp_poss,pace,off_rtg,def_rtg,net_rtg
)
# attach betting odds
odds_clean <- readRDS("odds_clean")
df_final <- df_adv %>%
left_join(odds_clean, by = c("game_id"="game_id",
"team_loc"="location",
"team_id"="team_id"))
# attach betting odds
odds_clean <- readRDS("odds_clean")
df_final <- df_adv %>%
left_join(odds_clean, by = c("game_id"="game_id",
"team_loc"="location",
"team_id"="team_id"))
league_avg <- df_team %>%
arrange(game_date, game_id) %>%
group_by(season, team_loc) %>%
summarize(across(team_score:tov_pts, \(x) mean(x)))
rm(list=ls()[! ls() %in% c("df_final", "league_avg")])
df_clean_lag <- df_final %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) lag(x, n = 1))) %>%
ungroup() %>%
na.exclude() %>%
select(-ast_tov_pct, -opp_ast_tov_pct)
set.seed(214)
train <- df_clean_lag %>%
ungroup() %>%
filter(season %in% 2014:2021) %>%
select(10, 14:87) %>%
select(-ast_tov_pct, -opp_ast_tov_pct) %>%
mutate(team_winner = if_else(team_winner == TRUE, "W", "L")) %>%
na.exclude()
set.seed(214)
train <- df_clean_lag %>%
ungroup() %>%
filter(season %in% 2014:2021) %>%
select(10, 14:87) %>%
mutate(team_winner = if_else(team_winner == TRUE, "W", "L"))
set.seed(214)
train <- df_clean_lag %>%
ungroup() %>%
filter(season %in% 2014:2021) %>%
select(10, 14:87) %>%
mutate(team_winner = if_else(team_winner == TRUE, "W", "L"))
test <- df_clean_lag %>%
ungroup() %>%
filter(season == 2022) %>%
select(10, 14:87) %>%
mutate(team_winner = if_else(team_winner == TRUE, "W", "L"))
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# Model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
sigma = c(0.005, 0.01, 0.05),
C = c(0.25, 0.5, 0.75)
)
View(train)
View(df_final)
df_clean_lag <- df_final %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) lag(x, n = 1))) %>%
ungroup() %>%
na.exclude() %>%
select(-ast_tov_pct, -opp_ast_tov_pct, -spread:over_under)
df_clean_lag <- df_final %>%
group_by(season, team_id, team_loc) %>%
mutate(across(fg2m:opp_tov_pts, \(x) lag(x, n = 1))) %>%
ungroup() %>%
na.exclude() %>%
select(-ast_tov_pct, -opp_ast_tov_pct, -spread, -moneyline, -over_under)
View(df_clean_lag)
set.seed(214)
train <- df_clean_lag %>%
ungroup() %>%
filter(season %in% 2014:2021) %>%
select(10, 14:84) %>%
mutate(team_winner = if_else(team_winner == TRUE, "W", "L"))
test <- df_clean_lag %>%
ungroup() %>%
filter(season == 2022) %>%
select(10, 14:84) %>%
mutate(team_winner = if_else(team_winner == TRUE, "W", "L"))
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# Model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
sigma = c(0.005, 0.01, 0.05),
C = c(0.25, 0.5, 0.75)
)
svm_win <- train(as.factor(team_winner) ~., data = train,
method = "svmRadial",
metric = "ROC",
trControl = ctrl,
tuneGrid = grid)
svm_win
svm_win$resample
svm_win$results
summary(svm_win)
plot(svm_win)
confusionMatrix(svm_win)
View(train)
View(test)
View(df_clean_lag)
View(train)
View(train)
summary(train)
View(train)
set.seed(214)
train <- df_clean_lag %>%
ungroup() %>%
filter(season %in% 2014:2021) %>%
select(10, 14:84) %>%
mutate(team_winner = as.factor(if_else(team_winner == TRUE, "W", "L")))
View(train)
set.seed(214)
train <- df_clean_lag %>%
ungroup() %>%
filter(season %in% 2014:2021) %>%
select(10, 14:84) %>%
mutate(team_winner = as.factor(if_else(team_winner == TRUE, "W", "L")))
test <- df_clean_lag %>%
ungroup() %>%
filter(season == 2022) %>%
select(10, 14:84) %>%
mutate(team_winner = as.factor(if_else(team_winner == TRUE, "W", "L")))
pre_proc_val <- preProcess(train[,-1], method = c("center", "scale"))
train[,-1] = predict(pre_proc_val, train[,-1])
test[,-1] = predict(pre_proc_val, test[,-1])
# Model
ctrl <- trainControl(method = "cv", number = 5, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
sigma = c(0.005, 0.01, 0.05),
C = c(0.25, 0.5, 0.75)
)
# Model
ctrl <- trainControl(method = "cv", number = 1, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
sigma = c(0.005, 0.01, 0.05),
C = c(0.25, 0.5, 0.75)
)
svm_win <- train(as.factor(team_winner) ~., data = train,
method = "svmRadial",
metric = "ROC",
trControl = ctrl,
tuneGrid = grid)
# Model
ctrl <- trainControl(method = "cv", number = 2, verboseIter = T,
classProbs = T, summaryFunction = twoClassSummary)
grid <- expand.grid(
sigma = c(0.005, 0.01, 0.05),
C = c(0.25, 0.5, 0.75)
)
svm_win <- train(as.factor(team_winner) ~., data = train,
method = "svmRadial",
metric = "ROC",
trControl = ctrl,
tuneGrid = grid)
svm_win
svm_win$resample
svm_win$results
summary(svm_win)
plot(svm_win)
confusionMatrix(svm_win)
win_pred <- predict(svm_win, test, type = "prob")
View(win_pred)
