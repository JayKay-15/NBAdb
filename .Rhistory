zone_pct = mean(shot_made_numeric),
zone_points_scored = sum(shot_made_numeric * shot_value),
zone_points_per_shot = mean(shot_made_numeric * shot_value),
team_name
)
league_zone_stats <- league_averages %>%
group_by(shot_zone_range, shot_zone_area) %>%
summarize(league_pct = sum(fgm) / sum(fga))
join_keys <- c("shot_zone_area", "shot_zone_range")
hex_data <- hex_data %>%
inner_join(zone_stats, by = join_keys) %>%
inner_join(league_zone_stats, by = join_keys)
max_hex_attempts <- max(hex_data$hex_attempts)
hex_data <- hex_data %>%
mutate(radius_factor = 0.25 + (1 - 0.25) * log(hex_attempts + 1) / log(max_hex_attempts + 1),
adj_x = center_x + radius_factor * (x - center_x),
adj_y = center_y + radius_factor * (y - center_y),
bounded_fg_diff = pmin(pmax(zone_pct - league_pct, -0.15), 0.15),
bounded_fg_pct = pmin(pmax(zone_pct, 0.2), 0.7),
bounded_points_per_shot = pmin(pmax(zone_points_per_shot, 0.5), 1.5)
)
names(shots) <- sub(".*\\.", "", names(shots))
names(league_averages) <- sub(".*\\.", "", names(league_averages))
df <- hex_data
names(df) <- sub(".*\\.", "", names(df))
p <- plot_court(court_themes$light) +
geom_polygon(
data = df,
aes(
x = adj_x,
y = adj_y,
group = hexbin_id,
fill = bounded_fg_diff,
color = after_scale(clr_darken(fill, .333))),
size = .25) +
scale_x_continuous(limits = c(-27.5, 27.5)) +
scale_y_continuous(limits = c(0, 45)) +
scale_fill_distiller(direction = -1,
palette = "RdBu",
limits = c(-.15, .15),
breaks = seq(-.15, .15, .03),
labels = c("-15%", "-12%", "-9%", "-6%", "-3%", "0%", "+3%", "+6%", "+9%", "+12%", "+15%"),
"FG Percentage Points vs. League Average") +
guides(fill=guide_legend(
label.position = 'bottom',
title.position = 'top',
keywidth=.45,
keyheight=.15,
default.unit="inch",
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1))  +
theme(text=element_text(size=14,  family="Gill Sans MT"),
legend.spacing.x = unit(0, 'cm'),
legend.title=element_text(size=12),
legend.text = element_text(size = rel(0.6)),
legend.margin=margin(-10,0,-1,0),
legend.position = 'bottom',
legend.box.margin=margin(-30,0,15,0),
plot.title = element_text(hjust = 0.5, vjust = -1, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = -.5),
plot.caption = element_text(face = "italic", size = 8),
plot.margin = margin(0, -5, 0, -5, "cm")) +
labs(title = player,
subtitle = "2022-23 Regular Season")
ggdraw(p) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
}
shot_heatmap_player <- function(player) {
shots_heatmap <- shots_heatmap %>%
filter(player_name == player) %>%
filter(shot_zone_basic != "Restricted Area")
hm <- generate_heatmap_chart(shots_heatmap, plot_court(court_themes$dark))
p <- ggdraw(hm) +
theme(plot.background = element_rect(fill="black", color = NA))
title <- ggdraw() +
draw_label(player, fontface='bold', size = 16, color = "white", fontfamily = "Gill Sans MT") +
theme(plot.background = element_rect(fill="black", color = NA))
plot_grid(title, p, ncol = 1, rel_heights = c(0.2, 1))
}
shot_scatter_player <- function(player) {
shots_heatmap <- shots_heatmap %>%
filter(player_name == player) %>%
filter(game_date == Sys.Date())
hm <- generate_scatter_chart(shots_heatmap, plot_court(court_themes$light))
p <- ggdraw(hm) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
title <- ggdraw() +
draw_label(player, fontface='bold', size = 16, color = "black", fontfamily = "Gill Sans MT") +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
plot_grid(title, p, ncol = 1, rel_heights = c(0.2, 1))
}
# Shot chart function teams   ------------------------------------------
shot_chart_team_gm <- function(team, gm) {
shots <- shots %>%
filter(team_name == team & game_id == gm)
# Convert shot location data to binned-hexagon data  ----------------------
xbnds <- c(plyr::round_any(min(shots$loc_x), 1.5, floor) - 1e-6,
plyr::round_any(max(shots$loc_x), 1.5, ceiling) + 1e-6)
xbins <- diff(xbnds) / 1.5
ybnds <- c(plyr::round_any(min(shots$loc_y), 1.5, floor) - 1e-6,
plyr::round_any(max(shots$loc_y), 1.5, ceiling) + 1e-6)
ybins <- diff(ybnds) / 1.5
hb <- hexbin(
x = shots$loc_x,
y = shots$loc_y,
xbins = xbins,
xbnds = xbnds,
ybnds = ybnds,
shape = ybins / xbins,
IDs = TRUE
)
shots <- shots %>% mutate(hexbin_id = hb@cID)
hexbin_stats <- shots %>%
mutate(hexbin_id = hb@cID) %>%
group_by(hexbin_id) %>%
summarize(
hex_attempts = n(),
hex_pct = mean(shot_made_numeric),
hex_points_scored = sum(shot_made_numeric * shot_value),
hex_points_per_shot = mean(shot_made_numeric * shot_value)
)
hexbin_ids_to_zones <- shots %>%
group_by(hexbin_id, shot_zone_range, shot_zone_area) %>%
summarize(attempts = n()) %>%
ungroup() %>%
arrange(hexbin_id, desc(attempts)) %>%
group_by(hexbin_id) %>%
filter(row_number() == 1) %>%
select(hexbin_id, shot_zone_range, shot_zone_area)
hexbin_stats <- inner_join(hexbin_stats, hexbin_ids_to_zones, by = "hexbin_id")
# from hexbin package, see: https://github.com/edzer/hexbin
sx <- hb@xbins / diff(hb@xbnds)
sy <- (hb@xbins * hb@shape) / diff(hb@ybnds)
dx <- 1 / (2 * sx)
dy <- 1 / (2 * sqrt(3) * sy)
origin_coords <- hexcoords(dx, dy)
hex_centers <- hcell2xy(hb)
hexbin_coords <- bind_rows(lapply(1:hb@ncells, function(i) {
data.frame(
x = origin_coords$x + hex_centers$x[i],
y = origin_coords$y + hex_centers$y[i],
center_x = hex_centers$x[i],
center_y = hex_centers$y[i],
hexbin_id = hb@cell[i]
)
}))
hex_data <- inner_join(hexbin_coords, hexbin_stats, by = "hexbin_id")
grouped_shots <- shots %>%
group_by(shot_zone_range, shot_zone_area)
zone_stats <- grouped_shots %>%
summarize(
zone_attempts = n(),
zone_pct = mean(shot_made_numeric),
zone_points_scored = sum(shot_made_numeric * shot_value),
zone_points_per_shot = mean(shot_made_numeric * shot_value),
team_name
)
league_zone_stats <- league_averages %>%
group_by(shot_zone_range, shot_zone_area) %>%
summarize(league_pct = sum(fgm) / sum(fga))
join_keys <- c("shot_zone_area", "shot_zone_range")
hex_data <- hex_data %>%
inner_join(zone_stats, by = join_keys) %>%
inner_join(league_zone_stats, by = join_keys)
max_hex_attempts <- max(hex_data$hex_attempts)
hex_data <- hex_data %>%
mutate(radius_factor = 0.25 + (1 - 0.25) * log(hex_attempts + 1) / log(max_hex_attempts + 1),
adj_x = center_x + radius_factor * (x - center_x),
adj_y = center_y + radius_factor * (y - center_y),
bounded_fg_diff = pmin(pmax(zone_pct - league_pct, -0.15), 0.15),
bounded_fg_pct = pmin(pmax(zone_pct, 0.2), 0.7),
bounded_points_per_shot = pmin(pmax(zone_points_per_shot, 0.5), 1.5)
)
names(shots) <- sub(".*\\.", "", names(shots))
names(league_averages) <- sub(".*\\.", "", names(league_averages))
df <- hex_data
names(df) <- sub(".*\\.", "", names(df))
p <- plot_court(court_themes$light) +
geom_polygon(
data = df,
aes(
x = adj_x,
y = adj_y,
group = hexbin_id,
fill = bounded_fg_diff,
color = after_scale(clr_darken(fill, .333))),
size = .25) +
scale_x_continuous(limits = c(-27.5, 27.5)) +
scale_y_continuous(limits = c(0, 45)) +
scale_fill_distiller(direction = -1,
palette = "RdBu",
limits = c(-.15, .15),
breaks = seq(-.15, .15, .03),
labels = c("-15%", "-12%", "-9%", "-6%", "-3%", "0%", "+3%", "+6%", "+9%", "+12%", "+15%"),
"FG Percentage Points vs. League Average") +
guides(fill=guide_legend(
label.position = 'bottom',
title.position = 'top',
keywidth=.45,
keyheight=.15,
default.unit="inch",
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1))  +
theme(text=element_text(size=14,  family="Gill Sans MT"),
legend.spacing.x = unit(0, 'cm'),
legend.title=element_text(size=12),
legend.text = element_text(size = rel(0.6)),
legend.margin=margin(-10,0,-1,0),
legend.position = 'bottom',
legend.box.margin=margin(-30,0,15,0),
plot.title = element_text(hjust = 0.5, vjust = -1, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = -.5),
plot.caption = element_text(face = "italic", size = 8),
plot.margin = margin(0, -5, 0, -5, "cm")) +
labs(title = team,
subtitle = "2022-23 Regular Season")
ggdraw(p) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
}
shot_heatmap_team_gm <- function(team, gm) {
shots_heatmap <- shots_heatmap %>%
filter(team_name == team & game_id == gm) %>%
filter(shot_zone_basic != "Restricted Area")
hm <- generate_heatmap_chart(shots_heatmap, plot_court(court_themes$dark))
ggdraw(hm) +
theme(plot.background = element_rect(fill="black", color = NA))
}
shot_scatter_team_gm <- function(team, gm) {
shots_heatmap <- shots_heatmap %>%
filter(team_name == team & game_id == gm) %>%
filter(game_date == Sys.Date())
hm <- generate_scatter_chart(shots_heatmap, plot_court(court_themes$light))
p <- ggdraw(hm) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
title <- ggdraw() +
draw_label(team, fontface='bold', size = 16, color = "black", fontfamily = "Gill Sans MT") +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
plot_grid(title, p, ncol = 1, rel_heights = c(0.2, 1))
}
# Shot chart function players by game  ------------------------------------------
shot_chart_player_gm <- function(player, gm) {
shots <- shots %>%
filter(player_name == player & game_id == gm)
# Convert shot location data to binned-hexagon data  ----------------------
xbnds <- c(plyr::round_any(min(shots$loc_x), 1.5, floor) - 1e-6,
plyr::round_any(max(shots$loc_x), 1.5, ceiling) + 1e-6)
xbins <- diff(xbnds) / 1.5
ybnds <- c(plyr::round_any(min(shots$loc_y), 1.5, floor) - 1e-6,
plyr::round_any(max(shots$loc_y), 1.5, ceiling) + 1e-6)
ybins <- diff(ybnds) / 1.5
hb <- hexbin(
x = shots$loc_x,
y = shots$loc_y,
xbins = xbins,
xbnds = xbnds,
ybnds = ybnds,
shape = ybins / xbins,
IDs = TRUE
)
shots <- shots %>% mutate(hexbin_id = hb@cID)
hexbin_stats <- shots %>%
mutate(hexbin_id = hb@cID) %>%
group_by(hexbin_id) %>%
summarize(
hex_attempts = n(),
hex_pct = mean(shot_made_numeric),
hex_points_scored = sum(shot_made_numeric * shot_value),
hex_points_per_shot = mean(shot_made_numeric * shot_value)
)
hexbin_ids_to_zones <- shots %>%
group_by(hexbin_id, shot_zone_range, shot_zone_area) %>%
summarize(attempts = n()) %>%
ungroup() %>%
arrange(hexbin_id, desc(attempts)) %>%
group_by(hexbin_id) %>%
filter(row_number() == 1) %>%
select(hexbin_id, shot_zone_range, shot_zone_area)
hexbin_stats <- inner_join(hexbin_stats, hexbin_ids_to_zones, by = "hexbin_id")
# from hexbin package, see: https://github.com/edzer/hexbin
sx <- hb@xbins / diff(hb@xbnds)
sy <- (hb@xbins * hb@shape) / diff(hb@ybnds)
dx <- 1 / (2 * sx)
dy <- 1 / (2 * sqrt(3) * sy)
origin_coords <- hexcoords(dx, dy)
hex_centers <- hcell2xy(hb)
hexbin_coords <- bind_rows(lapply(1:hb@ncells, function(i) {
data.frame(
x = origin_coords$x + hex_centers$x[i],
y = origin_coords$y + hex_centers$y[i],
center_x = hex_centers$x[i],
center_y = hex_centers$y[i],
hexbin_id = hb@cell[i]
)
}))
hex_data <- inner_join(hexbin_coords, hexbin_stats, by = "hexbin_id")
grouped_shots <- shots %>%
group_by(shot_zone_range, shot_zone_area)
zone_stats <- grouped_shots %>%
summarize(
zone_attempts = n(),
zone_pct = mean(shot_made_numeric),
zone_points_scored = sum(shot_made_numeric * shot_value),
zone_points_per_shot = mean(shot_made_numeric * shot_value),
team_name
)
league_zone_stats <- league_averages %>%
group_by(shot_zone_range, shot_zone_area) %>%
summarize(league_pct = sum(fgm) / sum(fga))
join_keys <- c("shot_zone_area", "shot_zone_range")
hex_data <- hex_data %>%
inner_join(zone_stats, by = join_keys) %>%
inner_join(league_zone_stats, by = join_keys)
max_hex_attempts <- max(hex_data$hex_attempts)
hex_data <- hex_data %>%
mutate(radius_factor = 0.25 + (1 - 0.25) * log(hex_attempts + 1) / log(max_hex_attempts + 1),
adj_x = center_x + radius_factor * (x - center_x),
adj_y = center_y + radius_factor * (y - center_y),
bounded_fg_diff = pmin(pmax(zone_pct - league_pct, -0.15), 0.15),
bounded_fg_pct = pmin(pmax(zone_pct, 0.2), 0.7),
bounded_points_per_shot = pmin(pmax(zone_points_per_shot, 0.5), 1.5)
)
names(shots) <- sub(".*\\.", "", names(shots))
names(league_averages) <- sub(".*\\.", "", names(league_averages))
df <- hex_data
names(df) <- sub(".*\\.", "", names(df))
p <- plot_court(court_themes$light) +
geom_polygon(
data = df,
aes(
x = adj_x,
y = adj_y,
group = hexbin_id,
fill = bounded_fg_diff,
color = after_scale(clr_darken(fill, .333))),
size = .25) +
scale_x_continuous(limits = c(-27.5, 27.5)) +
scale_y_continuous(limits = c(0, 45)) +
scale_fill_distiller(direction = -1,
palette = "RdBu",
limits = c(-.15, .15),
breaks = seq(-.15, .15, .03),
labels = c("-15%", "-12%", "-9%", "-6%", "-3%", "0%", "+3%", "+6%", "+9%", "+12%", "+15%"),
"FG Percentage Points vs. League Average") +
guides(fill=guide_legend(
label.position = 'bottom',
title.position = 'top',
keywidth=.45,
keyheight=.15,
default.unit="inch",
title.hjust = .5,
title.vjust = 0,
label.vjust = 3,
nrow = 1))  +
theme(text=element_text(size=14,  family="Gill Sans MT"),
legend.spacing.x = unit(0, 'cm'),
legend.title=element_text(size=12),
legend.text = element_text(size = rel(0.6)),
legend.margin=margin(-10,0,-1,0),
legend.position = 'bottom',
legend.box.margin=margin(-30,0,15,0),
plot.title = element_text(hjust = 0.5, vjust = -1, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 9, vjust = -.5),
plot.caption = element_text(face = "italic", size = 8),
plot.margin = margin(0, -5, 0, -5, "cm")) +
labs(title = player,
subtitle = "2022-23 Regular Season")
ggdraw(p) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
}
shot_heatmap_player_gm <- function(player, gm) {
shots_heatmap <- shots_heatmap %>%
filter(player_name == player & game_id == gm) %>%
filter(shot_zone_basic != "Restricted Area")
hm <- generate_heatmap_chart(shots_heatmap, plot_court(court_themes$dark))
p <- ggdraw(hm) +
theme(plot.background = element_rect(fill="black", color = NA))
title <- ggdraw() +
draw_label(player, fontface='bold', size = 16, color = "white", fontfamily = "Gill Sans MT") +
theme(plot.background = element_rect(fill="black", color = NA))
plot_grid(title, p, ncol = 1, rel_heights = c(0.2, 1))
}
shot_scatter_player_gm <- function(player, gm) {
shots_heatmap <- shots_heatmap %>%
filter(player_name == player & game_id == gm)
hm <- generate_scatter_chart(shots_heatmap, plot_court(court_themes$light))
p <- ggdraw(hm) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
title <- ggdraw() +
draw_label(player, fontface='bold', size = 16, color = "black", fontfamily = "Gill Sans MT", ) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
subtitle <- ggdraw() +
draw_label("Nets vs Magic - Nov. 28th 2022", size = 12, color = "black", fontfamily = "Gill Sans MT", ) +
theme(plot.background = element_rect(fill="floralwhite", color = NA))
plot_grid(title, subtitle, p, ncol = 1, rel_heights = c(0.1, 0.1, 1))
}
shot_chart_player_gm("Luka Doncic","0022200512")
shot_heatmap_player_gm("Luka Doncic","0022200512")
shot_scatter_player_gm("Luka Doncic","0022200512")
shot_chart_team_gm("Dallas Mavericks","0022200512")
library(rvest)
library(lubridate)
setwd("/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/")
########
# PARAMETERS
########
year <- "2023"
monthList <- c("october", "november", "december", "january", "february",
"march", "april")
playoff_startDate <- ymd("2023-04-10")
outputfile <- "NBA_2023_game_data.rds"
########
# SCRIPT FOR SCRAPING DATA STARTS HERE
########
df <- data.frame()
for (month in monthList) {
# get webpage
url <- paste0("https://www.basketball-reference.com/leagues/NBA_", year,
"_games-", month, ".html")
webpage <- read_html(url)
# get column names
col_names <- webpage %>%
html_nodes("table#schedule > thead > tr > th") %>%
html_attr("data-stat")
col_names <- c("game_id", col_names)
# extract dates column
# note that in april, there is a break in the table which just says
# "Playoffs". this messes with the data merging later, so we get rid of it
dates <- webpage %>%
html_nodes("table#schedule > tbody > tr > th") %>%
html_text()
dates <- dates[dates != "Playoffs"]
# extract game id
# we need to remove the NA that is due to the "Playoffs" row in april
game_id <- webpage %>%
html_nodes("table#schedule > tbody > tr > th") %>%
html_attr("csk")
game_id <- game_id[!is.na(game_id)]
# extract all columns (except date)
data <- webpage %>%
html_nodes("table#schedule > tbody > tr > td") %>%
html_text() %>%
matrix(ncol = length(col_names) - 2, byrow = TRUE)
# combine game IDs, dates and columns in dataframe for this month, add col names
month_df <- as.data.frame(cbind(game_id, dates, data), stringsAsFactors = FALSE)
names(month_df) <- col_names
# add to overall dataframe
df <- rbind(df, month_df)
}
# change columns to the correct types
df$visitor_pts <- as.numeric(df$visitor_pts)
df$home_pts    <- as.numeric(df$home_pts)
df$attendance  <- as.numeric(gsub(",", "", df$attendance))
df$date_game   <- mdy(df$date_game)
# add column to indicate if regular season or playoff
df$game_type <- with(df, ifelse(date_game >= playoff_startDate,
"Playoff", "Regular"))
library(tidyverse)
library(lubridate)
library(rvest)
inputfile <- "/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/NBA_2023_game_data.rds"
outputfile <- "/Users/Jesse/Documents/MyStuff/NBA Betting/NBAdb/NBA_2023_advanced_box_scores.rds"
game_df <- as_tibble(readRDS(inputfile))
adv_df <- as_tibble(readRDS(outputfile))
game_df <- game_df %>% filter(date_game < Sys.Date()) %>% select(-arena_name)
game_df <- subset(game_df, !(game_df$game_id %in% adv_df$game_id))
master_df <- data.frame()
for (current_id in game_df$game_id) {
print(current_id)
##########
# get box scores
##########
url <- paste0("https://www.basketball-reference.com/boxscores/", current_id,
".html")
webpage <- read_html(url)
tables <- webpage %>% html_nodes("table") %>%
html_table()
tables <- discard(tables, function(z) ncol(z) != 17)
names(tables) <- c("visitor_adv_boxscore","home_adv_boxscore")
a_box <- tables[[1]]
names(a_box) <- as.character(a_box[1,])
a_box <- a_box[-1,]
a_box <- a_box %>%
filter(Starters != 'Reserves' & Starters != 'Team Totals') %>%
mutate(across(c(MP:BPM), na_if, "Did Not Play")) %>%
mutate(game_id = current_id)  %>%
mutate(loc = "A") %>%
left_join(game_df[c(1,2,4)], by = "game_id") %>%
rename("team" = "visitor_team_name") %>%
rename("player" = "Starters")
a_box[a_box == ""] <- "0"
h_box <- tables[[2]]
names(h_box) <- as.character(h_box[1,])
h_box <- h_box[-1,]
h_box <- h_box %>%
filter(Starters != 'Reserves' & Starters != 'Team Totals') %>%
mutate(across(c(MP:BPM), na_if, "Did Not Play")) %>%
mutate(game_id = current_id) %>%
mutate(loc = "H") %>%
left_join(game_df[c(1,2,6)], by = "game_id") %>%
rename("team" = "home_team_name") %>%
rename("player" = "Starters")
h_box[h_box == ""] <- "0"
full_box <- rbind(a_box, h_box)
full_box <- full_box %>%
select(18,20,19,21,1,2:17)
full_box[, 7:ncol(full_box)] <- lapply(7:ncol(full_box), function(x) as.numeric(full_box[[x]]))
master_df <- rbind(master_df,full_box)
}
